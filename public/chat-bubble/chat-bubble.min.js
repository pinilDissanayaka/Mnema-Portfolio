/*! Chat Bubble Widget v1.0.0 | MIT License | Built 2025-07-16T09:24:45.196Z */
(function() {
'use strict';

const defaultConfig = {
agentId: '',
webName:'',
apiBaseUrl: 'http://localhost:8070',
position: 'bottom-right',
primaryColor: '#3B82F6',
welcomeMessage: "Hello! I'm your AI assistant. How can I help you today?",
placeholder: 'Type your message...',
title: 'AI Assistant',
subtitle: 'Online',
width: 400,
height: 600,
zIndex: 1000
};

const icons = {
messageCircle: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>',
x: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>',
send: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22,2 15,22 11,13 2,9"></polygon></svg>',
bot: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 8V4H8"></path><rect width="16" height="12" x="4" y="8" rx="2"></rect><path d="M2 14h2"></path><path d="M20 14h2"></path><path d="M15 13v2"></path><path d="M9 13v2"></path></svg>',
user: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>',
minimize: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3v3a2 2 0 0 1-2 2H3"></path><path d="M21 8h-3a2 2 0 0 1-2-2V3"></path><path d="M3 16h3a2 2 0 0 1 2 2v3"></path><path d="M16 21v-3a2 2 0 0 1 2-2h3"></path></svg>',
maximize: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3"></path></svg>'
};
class ChatBubbleWidget {
constructor(config = {}) {
this.config = { ...defaultConfig, ...config };
this.isOpen = false;
this.isMinimized = false;
this.messages = [];
this.isLoading = false;
this.sessionId = this.generateSessionId();
this.container = null;
if (!this.config.agentId) {
console.error('ChatBubble: agentId is required');
return;
}
this.init();
}
generateSessionId() {
return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
getPositionClasses() {
switch (this.config.position) {
case 'bottom-left':
return { bottom: '16px', left: '16px' };
case 'top-right':
return { top: '16px', right: '16px' };
case 'top-left':
return { top: '16px', left: '16px' };
default:
return { bottom: '16px', right: '16px' };
}
}
createStyles() {
const styles = `
.chat-bubble-widget * {
box-sizing: border-box;
margin: 0;
padding: 0;
}
.chat-bubble-widget {
position: fixed;
font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
z-index: ${this.config.zIndex};
}
.chat-bubble-button {
width: 64px;
height: 64px;
border-radius: 50%;
border: none;
background: ${this.config.primaryColor};
color: white;
box-shadow: 0 8px 32px rgba(0,0,0,0.15);
cursor: pointer;
display: flex;
align-items: center;
justify-content: center;
transition: all 0.2s ease;
}
.chat-bubble-button:hover {
transform: scale(1.1);
}
.chat-window {
background: white;
border-radius: 12px;
box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
display: flex;
flex-direction: column;
transition: all 0.3s ease;
overflow: hidden;
max-width: 90vw;
max-height: 90vh;
}
.chat-header {
background: ${this.config.primaryColor};
color: white;
padding: 16px;
display: flex;
align-items: center;
justify-content: space-between;
}
.chat-header-info {
display: flex;
align-items: center;
gap: 12px;
}
.chat-avatar {
width: 40px;
height: 40px;
border-radius: 50%;
background: rgba(255,255,255,0.2);
display: flex;
align-items: center;
justify-content: center;
}
.chat-title {
font-weight: 600;
font-size: 14px;
margin: 0;
}
.chat-subtitle {
font-size: 12px;
opacity: 0.9;
margin: 0;
}
.chat-controls {
display: flex;
gap: 8px;
}
.chat-control-btn {
background: none;
border: none;
color: white;
padding: 4px;
border-radius: 4px;
cursor: pointer;
transition: background 0.2s ease;
}
.chat-control-btn:hover {
background: rgba(255,255,255,0.2);
}
.chat-messages {
flex: 1;
overflow-y: auto;
padding: 16px;
background: #f9fafb;
max-height: 500px;
}
.message {
display: flex;
align-items: flex-start;
gap: 8px;
margin-bottom: 16px;
}
.message.user {
justify-content: flex-end;
}
.message.consecutive {
margin-bottom: 4px;
}
.message-avatar {
width: 32px;
height: 32px;
border-radius: 50%;
display: flex;
align-items: center;
justify-content: center;
flex-shrink: 0;
}
.message-avatar.bot {
background: ${this.config.primaryColor};
color: white;
}
.message-avatar.user {
background: #d1d5db;
color: #6b7280;
}
.message-content {
max-width: 75%;
border-radius: 12px;
padding: 12px;
position: relative;
}
.message-content.bot {
background: white;
border: 1px solid #e5e7eb;
border-bottom-left-radius: 4px;
color: #1f2937;
}
.message-content.user {
background: ${this.config.primaryColor};
color: white;
border-bottom-right-radius: 4px;
}
.message-text {
font-size: 14px;
line-height: 1.5;
word-wrap: break-word;
margin: 0;
}
.message-time {
font-size: 12px;
margin-top: 4px;
opacity: 0.7;
}
.typing-indicator {
display: flex;
align-items: center;
gap: 8px;
}
.typing-dots {
display: flex;
gap: 4px;
}
.typing-dot {
width: 8px;
height: 8px;
border-radius: 50%;
background: #9ca3af;
animation: typing 1.4s infinite ease-in-out;
}
.typing-dot:nth-child(2) {
animation-delay: 0.1s;
}
.typing-dot:nth-child(3) {
animation-delay: 0.2s;
}
@keyframes typing {
0%, 80%, 100% {
transform: scale(0.8);
opacity: 0.5;
}
40% {
transform: scale(1);
opacity: 1;
}
}
.chat-input-area {
padding: 16px;
background: white;
border-top: 1px solid #e5e7eb;
}
.chat-input-form {
display: flex;
gap: 8px;
align-items: flex-end;
}
.chat-input {
flex: 1;
border: 1px solid #d1d5db;
border-radius: 12px;
padding: 12px;
font-size: 14px;
resize: none;
min-height: 40px;
max-height: 96px;
outline: none;
transition: border-color 0.2s ease;
}
.chat-input:focus {
border-color: #60a5fa;
box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
}
.chat-send-btn {
background: ${this.config.primaryColor};
color: white;
border: none;
border-radius: 12px;
padding: 12px;
cursor: pointer;
transition: opacity 0.2s ease;
display: flex;
align-items: center;
justify-content: center;
}
.chat-send-btn:disabled {
opacity: 0.5;
cursor: not-allowed;
}
.chat-send-btn:not(:disabled):hover {
opacity: 0.9;
}
.hidden {
display: none !important;
}
`;
const styleSheet = document.createElement('style');
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);
}
init() {
this.createStyles();
this.createContainer();
this.addWelcomeMessage();
}
createContainer() {
this.container = document.createElement('div');
this.container.className = 'chat-bubble-widget';
const position = this.getPositionClasses();
Object.assign(this.container.style, position);
this.render();
document.body.appendChild(this.container);
}
addWelcomeMessage() {
this.messages.push({
id: '1',
type: 'bot',
content: this.config.welcomeMessage,
timestamp: new Date()
});
}
formatTime(date) {
return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}
async sendMessage(message) {
if (!message.trim() || !this.config.agentId || this.isLoading) return;
const userMessage = {
id: Date.now().toString(),
type: 'user',
content: message.trim(),
timestamp: new Date()
};
this.messages.push(userMessage);
this.isLoading = true;
this.render();
try {
const response = await fetch(`${this.config.apiBaseUrl}/chat/`, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify({
thread_id: this.sessionId,
web_name: this.config.webName,
message: message.trim()
}),
});
if (!response.ok) {
throw new Error(`HTTP error! status: ${response.status}`);
}
const result = await response.json();
const botMessage = {
id: (Date.now() + 1).toString(),
type: 'bot',
content: result.response,
timestamp: new Date()
};
this.messages.push(botMessage);
} catch (error) {
console.error('Chat error:', error);
const errorMessage = {
id: (Date.now() + 1).toString(),
type: 'bot',
content: `Sorry, I encountered an error: ${error.message}`,
timestamp: new Date()
};
this.messages.push(errorMessage);
} finally {
this.isLoading = false;
this.render();
}
}
render() {
if (!this.container) return;
if (!this.isOpen) {
this.container.innerHTML = `
<button class="chat-bubble-button" onclick="window.chatBubble.toggle()">
${icons.messageCircle}
</button>
`;
return;
}
const messagesHtml = this.messages.map((message, index) => {
const isConsecutive = index > 0 && this.messages[index - 1].type === message.type;
const avatarHtml = !isConsecutive ? `
<div class="message-avatar ${message.type}">
${message.type === 'bot' ? icons.bot : icons.user}
</div>
` : '<div style="width: 32px;"></div>';
return `
<div class="message ${message.type} ${isConsecutive ? 'consecutive' : ''}">
${message.type === 'bot' ? avatarHtml : ''}
<div class="message-content ${message.type}">
<p class="message-text">${message.content}</p>
<p class="message-time">${this.formatTime(message.timestamp)}</p>
</div>
${message.type === 'user' ? avatarHtml : ''}
</div>
`;
}).join('');
const loadingHtml = this.isLoading ? `
<div class="message bot">
<div class="message-avatar bot">${icons.bot}</div>
<div class="message-content bot">
<div class="typing-indicator">
<div class="typing-dots">
<div class="typing-dot"></div>
<div class="typing-dot"></div>
<div class="typing-dot"></div>
</div>
<span style="font-size: 12px; color: #6b7280; margin-left: 8px;">AI is typing...</span>
</div>
</div>
</div>
` : '';
this.container.innerHTML = `
<div class="chat-window" style="width: ${this.config.width}px; height: ${this.isMinimized ? '64px' : this.config.height + 'px'};">
<div class="chat-header">
<div class="chat-header-info">
<div class="chat-avatar">${icons.bot}</div>
<div>
<h3 class="chat-title">${this.config.title}</h3>
<p class="chat-subtitle">${this.config.subtitle}</p>
</div>
</div>
<div class="chat-controls">
<button class="chat-control-btn" onclick="window.chatBubble.toggleMinimize()">
${this.isMinimized ? icons.maximize : icons.minimize}
</button>
<button class="chat-control-btn" onclick="window.chatBubble.close()">
${icons.x}
</button>
</div>
</div>
<div class="chat-messages ${this.isMinimized ? 'hidden' : ''}">
${messagesHtml}
${loadingHtml}
</div>
<div class="chat-input-area ${this.isMinimized ? 'hidden' : ''}">
<form class="chat-input-form" onsubmit="window.chatBubble.handleSubmit(event)">
<textarea
class="chat-input"
placeholder="${this.config.placeholder}"
rows="1"
onkeydown="window.chatBubble.handleKeyDown(event)"
${this.isLoading ? 'disabled' : ''}
></textarea>
<button type="submit" class="chat-send-btn" ${this.isLoading ? 'disabled' : ''}>
${icons.send}
</button>
</form>
</div>
</div>
`;

const messagesContainer = this.container.querySelector('.chat-messages');
if (messagesContainer && !this.isMinimized) {
setTimeout(() => {
messagesContainer.scrollTop = messagesContainer.scrollHeight;
}, 50);
}
}
toggle() {
this.isOpen = !this.isOpen;
this.render();
}
close() {
this.isOpen = false;
this.render();
}
toggleMinimize() {
this.isMinimized = !this.isMinimized;
this.render();
}
handleSubmit(event) {
event.preventDefault();
const input = event.target.querySelector('.chat-input');
const message = input.value.trim();
if (message) {
this.sendMessage(message);
input.value = '';
}
}
handleKeyDown(event) {
if (event.key === 'Enter' && !event.shiftKey) {
event.preventDefault();
const form = event.target.closest('form');
this.handleSubmit({ preventDefault: () => {}, target: form });
}
}
}

window.ChatBubbleWidget = ChatBubbleWidget;

if (window.chatBubbleConfig) {
window.chatBubble = new ChatBubbleWidget(window.chatBubbleConfig);
}

window.initChatBubble = function(config) {
window.chatBubble = new ChatBubbleWidget(config);
return window.chatBubble;
};
})();